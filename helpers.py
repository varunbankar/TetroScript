# ------------------------------------------------------------
# This file contains helper functions used throughout the project.
# ------------------------------------------------------------

def test_lexer(lexer, filepath):
    """
    Test lexer by scanning the code from the given filepath and printing
    out the tokens.
    """
    print("Test Lexer Log: Scanning code from file", filepath)

    with open(filepath, "rt") as f:
        code = f.read()
        for token in lexer.tokenize(code):
            print(token)

    print("Test Lexer Log: Finished.")


def test_parser(parser, lexer, filepath):
    """
    Test the parser by feeding the tokens generated by the lexer
    to parser in debug mode (printing out the result).
    """
    print("Test Parser Log: Scanning & parsing code from file", filepath)

    # Turn on parser's debug mode
    print("Test Parser Log: Turning on parser's debug mode", filepath)
    if hasattr(parser, "debug"):
        parser.debug = True

    with open(filepath, "rt") as f:
        try:
            result = parser.parse(lexer.tokenize(f.read()))
            print(result)
        except EOFError:
            print("ERROR: EOF ")

    print("Test Parser Log: Finished.")


def test_translator(translator, parser, lexer, filepath):
    """
    Test the translator by feeding the parsed output from parser.
    Runs the game.
    """
    print("Test Translator Log: Scanning, parsing and translating code from file", filepath)

    with open(filepath, "rt") as f:
        try:
            result = parser.parse(lexer.tokenize(f.read()))
            game_sequence, game_config = translator.translate(*result)
            print("Game Sequence:", game_sequence)
            print("Game Config:", game_config)
        except Exception as e:
            print("ERROR:", e)

    print("Test Translator Log: Finished.")


def validate_extensions(filepaths):
    """
    Validates the file extensions of Tetroscript files.
    """
    for filepath in filepaths:
        extension = filepath.split(".")[-1]
        if extension != "ts":
            return False
    return True
